util = require "xlua/util"

-- Unsecure methods
io = nil
os.execute = nil
os.exit = nil
os.remove = nil
os.rename = nil
os.tmpname = nil

-- File-handling
function loadfile(file)
	return load(self:ReadBytes(file))
end

function dofile(file)
	return assert(loadfile(file))()
end

-- Injection
function inject(type, method, extend, code)
	if code == nil then
	 	code = extend
	 	extend = true
	end
	-- "xlua.hotfix" is faster but doesn't allow calling the original function from injected method,
	-- "util.hotfix_ex" does â€“ provide a way for doing both using a "extend" toggle, defaulting to true
	if extend == true then
		util.hotfix_ex(type, method, code)
	else
		xlua.hotfix(type, method, code)
	end
end

-- Coroutines
function startCoroutine(...)
   self.ScriptDispatcher:StartCoroutineSafe(util.cs_generator(...))
end

yield = coroutine.yield

-- Scheduling
function schedule(type, action)
	self.ScriptDispatcher:Schedule(type, action)
end

function invoke(action, time)
	startCoroutine(function()
		yield(UE.WaitForSeconds(time))
		action()
	end)
end

function invokeRepeating(action, time, interval)
	startCoroutine(function()
		yield(UE.WaitForSeconds(time))
		while true do
			action()
			yield(UE.WaitForSeconds(interval))
		end
		action()
	end)
end